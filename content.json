{"meta":{"title":"阿龙的小型博客","subtitle":null,"description":null,"author":"wang lv long","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-04-25T15:58:38.691Z","updated":"2019-04-25T15:58:38.691Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"简历"},{"title":"Gallery","date":"2017-01-17T13:39:03.000Z","updated":"2019-04-25T15:58:38.693Z","comments":true,"path":"gallery/index.html","permalink":"http://yoursite.com/gallery/index.html","excerpt":"","text":"图库"},{"title":"group","date":"2017-01-17T13:05:04.000Z","updated":"2019-04-25T15:58:38.694Z","comments":true,"path":"group/index.html","permalink":"http://yoursite.com/group/index.html","excerpt":"","text":"团队"},{"title":"tags","date":"2017-01-17T13:39:14.000Z","updated":"2019-04-25T15:58:38.696Z","comments":true,"path":"tag/index.html","permalink":"http://yoursite.com/tag/index.html","excerpt":"","text":"tags"}],"posts":[{"title":"AJAX","slug":"ajax简介","date":"2019-04-25T16:00:00.000Z","updated":"2019-04-26T00:23:03.512Z","comments":true,"path":"2019/04/26/ajax简介/","link":"","permalink":"http://yoursite.com/2019/04/26/ajax简介/","excerpt":"","text":"什么是 AJAX ？AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 AJAX = 异步 JavaScript 和 XML。Asynchronous Javascript And XML AJAX 是一种用于创建快速动态网页的技术。 通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。 有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。 AJAX - 创建 XMLHttpRequest 对象 XMLHttpRequest 是 AJAX 的基础。 XMLHttpRequest 对象所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。 XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 创建 XMLHttpRequest 对象所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。 创建 XMLHttpRequest 对象的语法： variable=new XMLHttpRequest(); 老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象： variable=new ActiveXObject(“Microsoft.XMLHTTP”); 为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ： 兼容语法： var xmlhttp;if (window.XMLHttpRequest){// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码xmlhttp=new XMLHttpRequest();}else{// IE6, IE5 浏览器执行代码xmlhttp=new ActiveXObject(“Microsoft.XMLHTTP”);} AJAX - 向服务器发送请求请求 XMLHttpRequest 对象用于和服务器交换数据。 向服务器发送请求如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法： xmlhttp.open(“GET”,”ajax_info.txt”,true); xmlhttp.send(); 方法 描述 open(method,url,async) 规定请求的类型、URL 以及是否异步处理请求。 method：请求的类型；GET 或 POST url：文件在服务器上的位置 async：true（异步）或 false（同步） send(string) 将请求发送到服务器。 string：仅用于 POST 请求 GET 还是 POST？与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。 然而，在以下情况中，请使用 POST 请求： 无法使用缓存文件（更新服务器上的文件或数据库） 向服务器发送大量数据（POST 没有数据量限制） 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠 GET 请求一个简单的 GET 请求： 实例xmlhttp.open(“GET”,”/try/ajax/demo_get.php”,true); xmlhttp.send(); POST 请求一个简单 POST 请求： 实例 xmlhttp.open(“POST”,”/try/ajax/demo_post.php”,true); xmlhttp.send(); 如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据： 实例 xmlhttp.open(“POST”,”/try/ajax/demo_post2.php”,true); xmlhttp.setRequestHeader(“Content-type”,”application/x-www-form-urlencoded”); xmlhttp.send(“fname=Henry&amp;lname=Ford”); 方法 描述 setRequestHeader(header,value) 向请求添加 HTTP 头。 header: 规定头的名称 value: 规定头的值 url - 服务器上的文件open() 方法的 url 参数是服务器上文件的地址： xmlhttp.open(“GET”,”ajax_test.html”,true); 该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。 异步 - True 或 False？AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。 XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true： xmlhttp.open(“GET”,”ajax_test.html”,true); 对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。 通过 AJAX，JavaScript 无需等待服务器的响应，而是： 在等待服务器响应时执行其他脚本 当响应就绪后对响应进行处理 Async=true当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数： sync = false如需使用 async=false，请将 open() 方法中的第三个参数改为 false： 1xmlhttp.open(&quot;GET&quot;,&quot;test1.txt&quot;,false); 我们不推荐使用 async=false，但是对于一些小型的请求，也是可以的。 请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。 注意：当您使用 async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可： AJAX - 服务器 响应 服务器响应如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。 属性 描述 responseText 获得字符串形式的响应数据。 responseXML 获得 XML 形式的响应数据。 responseText 属性如果来自服务器的响应并非 XML，请使用 responseText 属性。 responseText 属性返回字符串形式的响应，因此您可以这样使用： document.getElementById(“myDiv”).innerHTML=xmlhttp.responseText; responseXML 属性如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性： ​ 实例请求 cd_catalog.xml 文件，并解析响应： xmlDoc=xmlhttp.responseXML; txt=””; x=xmlDoc.getElementsByTagName(“ARTIST”); for (i=0;i&lt;x.length;i++) { txt=txt + x[i].childNodes[0].nodeValue + ““; } document.getElementById(“myDiv”).innerHTML=txt; 获取元素内容 /txt=txt + x[i].childNodes[0].nodeValue + “ “; AJAX - onreadystatechange 事件 onreadystatechange 事件当请求被发送到服务器时，我们需要执行一些基于响应的任务。 每当 readyState 改变时，就会触发 onreadystatechange 事件。 readyState 属性存有 XMLHttpRequest 的状态信息。 下面是 XMLHttpRequest 对象的三个重要的属性： 属性 描述 onreadystatechange 存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。 readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。 0: 请求未初始化 1: 服务器连接已建立 2: 请求已接收 3: 请求处理中 4: 请求已完成，且响应已就绪 status 200: “OK” 404: 未找到页面 在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。 当 readyState 等于 4 且状态为 200 时，表示响应已就绪： 实例 xmlhttp.onreadystatechange=function() { if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) { document.getElementById(“myDiv”).innerHTML=xmlhttp.responseText; } } 注意： onreadystatechange 事件被触发 4 次（0 - 4）, 分别是： 0-1、1-2、2-3、3-4，对应着 readyState 的每个变化。 ps： xmlhttp.readyState的值及解释： 0：请求未初始化（还没有调用 open()）。 1：请求已经建立，但是还没有发送（还没有调用 send()）。 2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。 3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。 4：响应已完成；您可以获取并使用服务器的响应了。 xmlhttp.status的值及解释： 100——客户必须继续发出请求 101——客户要求服务器根据请求转换HTTP协议版本 200——交易成功 201——提示知道新文件的URL 202——接受和处理、但处理未完成 203——返回信息不确定或不完整 204——请求收到，但返回信息为空 205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件 206——服务器已经完成了部分用户的GET请求 300——请求的资源可在多处得到 301——删除请求数据 302——在其他地址发现了请求数据 303——建议客户访问其他URL或访问方式 304——客户端已经执行了GET，但文件未变化 305——请求的资源必须从服务器指定的地址得到 306——前一版本HTTP中使用的代码，现行版本中不再使用 307——申明请求的资源临时性删除 400——错误请求，如语法错误 401——请求授权失败 402——保留有效ChargeTo头响应 403——请求不允许 404——没有发现文件、查询或URl 405——用户在Request-Line字段定义的方法不允许 406——根据用户发送的Accept拖，请求资源不可访问 407——类似401，用户必须首先在代理服务器上得到授权 408——客户端没有在用户指定的饿时间内完成请求 409——对当前资源状态，请求不能完成 410——服务器上不再有此资源且无进一步的参考地址 411——服务器拒绝用户定义的Content-Length属性请求 412——一个或多个请求头字段在当前请求中错误 413——请求的资源大于服务器允许的大小 414——请求的资源URL长于服务器允许的长度 415——请求资源不支持请求项目格式 416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段 417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求 合起来 500——服务器产生内部错误 501——服务器不支持请求的函数 502——服务器暂时不可用，有时是为了防止发生系统过载 503——服务器过载或暂停维修 504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长 505——服务器不支持或拒绝支请求头中指定的HTTP版本 1xx:信息响应类，表示接收到请求并且继续处理 2xx:处理成功响应类，表示动作被成功接收、理解和接受 3xx:重定向响应类，为了完成指定的动作，必须接受进一步处理 4xx:客户端错误，客户请求包含语法错误或者是不能正确执行 5xx:服务端错误，服务器不能正确执行一个正确的请求 xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200的解释：请求完成并且成功返回","categories":[{"name":"First","slug":"First","permalink":"http://yoursite.com/categories/First/"}],"tags":[{"name":"First","slug":"First","permalink":"http://yoursite.com/tags/First/"},{"name":"Second","slug":"Second","permalink":"http://yoursite.com/tags/Second/"}],"author":"MinHow"},{"title":"Hello World","slug":"hello-world","date":"2019-04-25T15:58:38.687Z","updated":"2019-04-25T15:58:38.687Z","comments":true,"path":"2019/04/25/hello-world/","link":"","permalink":"http://yoursite.com/2019/04/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"test_my_site","slug":"test-my-site","date":"2019-03-27T06:36:42.000Z","updated":"2019-04-25T15:58:38.690Z","comments":true,"path":"2019/03/27/test-my-site/","link":"","permalink":"http://yoursite.com/2019/03/27/test-my-site/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"Hello World","date":"2017-06-17T16:00:00.000Z","updated":"2019-04-25T15:58:38.685Z","comments":true,"path":"2017/06/18/Hello World/","link":"","permalink":"http://yoursite.com/2017/06/18/Hello World/","excerpt":"MinHow-This is a summary","text":"MinHow-This is a summary","categories":[{"name":"First","slug":"First","permalink":"http://yoursite.com/categories/First/"}],"tags":[{"name":"First","slug":"First","permalink":"http://yoursite.com/tags/First/"},{"name":"Second","slug":"Second","permalink":"http://yoursite.com/tags/Second/"}],"author":"MinHow"},{"title":"hexo 的第一篇文章","slug":"hexo 的第一篇文章","date":"2017-03-27T05:48:25.000Z","updated":"2019-04-25T15:58:38.689Z","comments":true,"path":"2017/03/27/hexo 的第一篇文章/","link":"","permalink":"http://yoursite.com/2017/03/27/hexo 的第一篇文章/","excerpt":"","text":"hexo 的第一篇文章","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/categories/Algorithm/"}],"tags":[{"name":"标签1","slug":"标签1","permalink":"http://yoursite.com/tags/标签1/"},{"name":"标签2 (可选)","slug":"标签2-可选","permalink":"http://yoursite.com/tags/标签2-可选/"}]}]}